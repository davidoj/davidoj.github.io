
Game.Entity = function(properties) {
	properties = properties || {};
	Game.Glyph.call(this,properties);
	this._name = properties['name'] || '';
	this._x = properties['x'] || 1;
	this._y = properties['y'] || 1;
	
	this._map = null;

	this._attachedMixins = {};
	this._attachedMixinGroups = {};
	var mixins =  properties['mixins'];
	for (var i = 0; i < mixins.length; i++) {
		for (var key in mixins[i]) {
			if (key !== 'init' && key !== 'name' && !this.hasOwnProperty(key)) {
				this[key] = mixins[i][key];
			}
		}
		this._attachedMixins[mixins[i].name] = true;

        if (mixins[i].groupName) {
            this._attachedMixinGroups[mixins[i].groupName] = true;
        }

        if (mixins[i].init) {
            mixins[i].init.call(this, properties);
        }
	}

}

Game.Entity.extend(Game.Glyph);

Game.Entity.prototype.setName = function(name) {
	this._name = name;
}

Game.Entity.prototype.setX = function(x) {
	this._x = x;
}

Game.Entity.prototype.setY = function(y) {
	this._y = y;
}

Game.Entity.prototype.getName = function() {
	return this._name;
}

Game.Entity.prototype.getX = function() {
	return this._x;
}

Game.Entity.prototype.getY = function() {
	return this._y;
}

Game.Entity.prototype.setMap = function(map) {
	this._map = map;
}

Game.Entity.prototype.getMap = function() {
	return this._map;
}

Game.Entity.prototype.hasMixin = function(obj) {
	if (typeof obj === 'object') {
		return this._attachedMixins[obj.name];
	}
	else {
		return this._attachedMixins[obj] || this._attachedMixinGroups[obj];
	}
}

Game.Mixins = {};

//Entity can move to unblocked squares
//Takes argument in coordinates relative to current position
Game.Mixins.RelMoveable = {
	name : 'RelMoveable',
	groupName : 'Moveable',
	tryMove: function(dx,dy,map) {
		var x = this.getX() + dx;
		var y = this.getY() + dy;
		var tile = map.getTile(x,y);
		if (tile.isWalkable()) {
			this._x = x;
			this._y = y;
			return true;
		}
		else { return false;}
	}
}

//Entity can move to unblocked squares
//Takes argument in absolute coordinates to current position
Game.Mixins.AbsMoveable = {
	name : 'AbsMoveable',
	groupName : 'Moveable',
	tryMove: function(x,y,map) {
		var tile = map.getTile(x,y);
		if (tile.isWalkable()) {
			this._x = x;
			this._y = y;
			return true;
		}
		else { return false;}
	}
}


//Entity has direction given by angle in "eighthians" (8 eighthians = 2PI radians)
Game.Mixins.Directional = {
	name : 'Directional',
	init : function(properties) {
		var x = properties['x_dir'] || 0;
		var y = properties['y_dir'] || -1;
		this._direction = v2d(x,-y);
		this._chararray = properties['chararray'] || Game.Chars.SingleArrows;
		this._char = this._chararray[this._direction];
	},	
	turn: function(x,y) {
		this._direction = v2d(x,-y);
		this._char = this._chararray[this._direction];
	}
}

Game.Mixins.PlayerActor = {
	name : 'PlayerActor',
	groupName : 'Actor',
	act : function() {
		Game.refresh();
		this.getMap().getEngine().lock();
	}
}

//Takes random steps around the map
Game.Mixins.RandomWalkerActor = {
	name : 'MonsterActor',
	groupName : 'Actor',
	act : function() {
		var x = Math.round(2*Math.random())-1;
		var y = Math.round(2*Math.random())-1;
		this.tryMove(x,y,this._map);
	}
}

//Hit other entities
Game.Mixins.PlayerHitter = {
	name : 'PlayerHitter',
	groupName : 'Hitter',
	init : function(properties) {
		this._dmg = properties['dmg'] || 1;
	},
	hit : function(entity) {
		entity.takeDamage(this._dmg);
	}
	getTarget : function() {
		
}

//Take damage
Game.Mixins.Destructible = {
	name : 'Destructible',

	init : function(properties) {
		this._mhp = properties['mhp'] || 1; //Max hitpoints
		this._chp = properties['chp'] || this._mhp; //Current hitpoints
	},
	takeDamage : function(damage) {
		this._chp -= damage;
		if (this._chp <= 0) {
			this.die();
		}
	},
	die : function() {
		this.getMap().removeEntity(this);
	}
}


//Player template
Game.PlayerTemplate = {
	character : '↑',
	foreground : 'white',
	background : 'black',
	chararray: Game.Chars.SingleArrows,
	mixins : [Game.Mixins.RelMoveable, 
			  Game.Mixins.Directional, 
			  Game.Mixins.PlayerActor, 
			  Game.Mixins.PlayerHitter]
}

//Monster template
Game.MonsterTemplate = {
	character: '⇑',
	foreground : 'white',
	background : 'black',
	chararray: Game.Chars.DoubleArrows,
	mixins : [Game.Mixins.RelMoveable, 
			  Game.Mixins.Directional, 
			  Game.Mixins.RandomWalkerActor, 
			  Game.Mixins.Destructible]
}
